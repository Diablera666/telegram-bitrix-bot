import os
import time
import logging
import threading
from datetime import datetime, timedelta
from typing import Dict, Optional, List, Union
from flask import Flask
import telebot
from telebot.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    Message, CallbackQuery
)
import requests
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

BITRIX_WEBHOOK_URL = os.getenv("BITRIX_WEBHOOK_URL")
if not BITRIX_WEBHOOK_URL:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω BITRIX_WEBHOOK_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

CREATOR_ID = 12  # ID –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á–∏ –≤ –ë–∏—Çrix24
STORAGE_ID = 11
PARENT_ID = 5636  # –ü–∞–ø–∫–∞ "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã" –Ω–∞ –æ–±—â–µ–º –¥–∏—Å–∫–µ Bitrix24

# ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
RESPONSIBLE_IDS = {
    "–í–æ–ø—Ä–æ—Å 1": 270,
    "–í–æ–ø—Ä–æ—Å 2": 12,
    "–í–æ–ø—Ä–æ—Å 3": 270,
    "–î—Ä—É–≥–æ–µ": 12
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
app = Flask(__name__)

# –¢–∏–ø—ã –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
UserState = Dict[str, Union[str, List[str]]]
StatesDict = Dict[int, UserState]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state: StatesDict = {}
last_callback_time: Dict[int, float] = {}  # –î–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —á–∞—Å—Ç—ã—Ö –Ω–∞–∂–∞—Ç–∏–π

# ---------------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------------
def add_workdays(start_date: datetime, workdays: int) -> datetime:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –∫ –¥–∞—Ç–µ."""
    cur = start_date
    added = 0
    while added < workdays:
        cur += timedelta(days=1)
        if cur.weekday() < 5:  # –ü–Ω-–ü—Ç
            added += 1
    return cur

def get_file_info(message: Message) -> Optional[Dict[str, str]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    content_type = message.content_type
    try:
        if content_type == "photo":
            return {"file_id": message.photo[-1].file_id, "type": "photo"}
        elif content_type == "video":
            return {"file_id": message.video.file_id, "type": "video"}
        elif content_type == "document":
            return {"file_id": message.document.file_id, "type": "document"}
        else:
            logger.warning(f"Unsupported content type: {content_type}")
            return None
    except Exception as e:
        logger.error(f"Error getting file info: {e}")
        return None

def file_link(message: Message) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª Telegram –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    try:
        file_info = get_file_info(message)
        if not file_info:
            return None

        info = bot.get_file(file_info["file_id"])
        return f"https://api.telegram.org/file/bot{TOKEN}/{info.file_path}"

    except Exception as e:
        logger.error(f"Error getting file link: {e}")
        return None

def download_file(url: str) -> Optional[str]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ URL –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª."""
    try:
        local_filename = url.split('/')[-1].split('?')[0]
        with requests.get(url, stream=True, timeout=30) as resp:
            resp.raise_for_status()
            with open(local_filename, 'wb') as f:
                for chunk in resp.iter_content(chunk_size=8192):
                    f.write(chunk)
        return local_filename
    except Exception as e:
        logger.error(f"Error downloading file: {e}")
        return None

def upload_file_to_bitrix(file_url: str, folder_id: int = PARENT_ID) -> Optional[int]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ URL –≤ Bitrix24 –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç attachedId –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    local_filename = None
    try:
        local_filename = download_file(file_url)
        if not local_filename:
            return None

        upload_url = BITRIX_WEBHOOK_URL.replace('task.item.add.json', 'disk.folder.uploadfile.json')
        
        with open(local_filename, 'rb') as f:
            files = {'file': f}
            data = {'id': folder_id}
            response = requests.post(upload_url, data=data, files=files, timeout=30)
            response.raise_for_status()
            
            result = response.json()
            if 'result' in result:
                return result['result']['attachedId']
            
            logger.error(f"Bitrix24 upload error: {result.get('error', 'Unknown error')}")
            return None

    except Exception as e:
        logger.error(f"Error uploading file to Bitrix24: {e}")
        return None
    finally:
        if local_filename and os.path.exists(local_filename):
            try:
                os.remove(local_filename)
            except Exception as e:
                logger.error(f"Error removing temp file: {e}")

def create_bitrix_task(title: str, description: str, responsible_id: int, 
                      attached_ids: Optional[List[int]] = None) -> bool:
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –≤ Bitrix24 —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    deadline = add_workdays(datetime.now(), 3).strftime('%Y-%m-%dT%H:%M:%S')
    fields = {
        "TITLE": title,
        "DESCRIPTION": description,
        "RESPONSIBLE_ID": responsible_id,
        "CREATED_BY": CREATOR_ID,
        "DEADLINE": deadline
    }
    
    if attached_ids:
        fields["UF_TASK_WEBDAV_FILES"] = attached_ids

    try:
        response = requests.post(
            BITRIX_WEBHOOK_URL,
            json={"fields": fields},
            timeout=15
        )
        response.raise_for_status()
        
        if response.status_code == 200:
            return True
            
        logger.error(f"Bitrix24 task creation error: {response.text}")
        return False
        
    except Exception as e:
        logger.error(f"Error creating Bitrix task: {e}")
        return False

# ---------------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------------
def create_menu_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é."""
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(
        KeyboardButton("–í–æ–ø—Ä–æ—Å 1"),
        KeyboardButton("–í–æ–ø—Ä–æ—Å 2"),
        KeyboardButton("–í–æ–ø—Ä–æ—Å 3"),
        KeyboardButton("–î—Ä—É–≥–æ–µ")
    )
    return kb

def create_finish_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–µ–π."""
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="ok"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"),
        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª", callback_data="delete_last_file"),
        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")
    )
    return kb

# ----------- –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ----------
def is_throttled(chat_id: int, delay_sec: float = 1.5) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –ø—Ä–∏—Ö–æ–¥—è—Ç –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    now = time.time()
    last_time = last_callback_time.get(chat_id, 0)
    
    if now - last_time < delay_sec:
        return True
        
    last_callback_time[chat_id] = now
    return False

def clear_user_state(chat_id: int) -> None:
    """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if chat_id in user_state:
        del user_state[chat_id]

def get_user_info(call: CallbackQuery) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    user = call.from_user
    if user.username:
        return f"@{user.username}"
    return f"{user.first_name or ''} {user.last_name or ''}".strip()

# --------------- —Ö—ç–Ω–¥–ª–µ—Ä—ã ----------------
@bot.message_handler(commands=['start', 'help'])
def cmd_start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help."""
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –≤ Bitrix24.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=create_menu_keyboard()
    )

@bot.message_handler(func=lambda m: m.text in ["–í–æ–ø—Ä–æ—Å 1", "–í–æ–ø—Ä–æ—Å 2", "–í–æ–ø—Ä–æ—Å 3", "–î—Ä—É–≥–æ–µ"])
def handle_menu(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é."""
    chat_id = message.chat.id
    choice = message.text
    
    user_state[chat_id] = {
        "choice": choice,
        "buffer_text": "",
        "buffer_files": []
    }
    
    bot.send_message(
        chat_id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{choice}</b>\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã).\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª.",
        reply_markup=create_finish_keyboard()
    )

@bot.message_handler(content_types=['text', 'photo', 'document', 'video'])
def collect_input(message: Message) -> None:
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç –∏ —Ñ–∞–π–ª—ã)."""
    chat_id = message.chat.id
    if chat_id not in user_state:
        return

    state = user_state[chat_id]
    
    if message.content_type == 'text':
        state["buffer_text"] += message.text + "\n"
    else:
        link = file_link(message)
        if link:
            state["buffer_files"].append(link)
        else:
            logger.warning(f"Failed to get file link for {message.content_type}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏—è
    preview = state["buffer_text"].strip() or "<i>(—Ç–µ–∫—Å—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω)</i>"
    files_count = len(state["buffer_files"])
    
    bot.send_message(
        chat_id,
        f"<b>–¢–µ–∫—É—â–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫:</b>\n{preview}\n\n"
        f"<b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:</b> {files_count}",
        reply_markup=create_finish_keyboard()
    )

@bot.callback_query_handler(func=lambda c: c.data in ["ok", "back", "delete_last_file", "cancel"])
def handle_callbacks(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫."""
    chat_id = call.message.chat.id
    data = call.data

    # –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    if is_throttled(chat_id):
        bot.answer_callback_query(call.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        return

    if data == "back":
        clear_user_state(chat_id)
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
        bot.send_message(
            chat_id,
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=create_menu_keyboard()
        )
        return

    if data == "cancel":
        clear_user_state(chat_id)
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
        bot.send_message(
            chat_id,
            "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=create_menu_keyboard()
        )
        return

    state = user_state.get(chat_id)
    if not state:
        bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∑–∞–Ω–æ–≤–æ.")
        bot.send_message(chat_id, "–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=create_menu_keyboard())
        return

    if data == "delete_last_file":
        if not state["buffer_files"]:
            bot.answer_callback_query(call.id, "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        state["buffer_files"].pop()
        bot.answer_callback_query(call.id, "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω.")

        preview = state["buffer_text"].strip() or "<i>(—Ç–µ–∫—Å—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω)</i>"
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=f"<b>–¢–µ–∫—É—â–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫:</b>\n{preview}\n\n"
                 f"<b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:</b> {len(state['buffer_files'])}",
            reply_markup=create_finish_keyboard()
        )
        return

    if data == "ok":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª—ã
        if not state["buffer_text"].strip() and not state["buffer_files"]:
            bot.answer_callback_query(
                call.id,
                "–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º!"
            )
            return

        author = get_user_info(call)
        description = f"–ê–≤—Ç–æ—Ä: {author}\n\n{state['buffer_text'].strip()}"

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –≤ Bitrix24
        attached_ids = []
        for file_url in state["buffer_files"]:
            attached_id = upload_file_to_bitrix(file_url)
            if attached_id:
                attached_ids.append(attached_id)
            else:
                logger.warning(f"Failed to upload file: {file_url}")

        # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
        responsible_id = RESPONSIBLE_IDS.get(state["choice"], CREATOR_ID)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        success = create_bitrix_task(
            title=state["choice"],
            description=description,
            responsible_id=responsible_id,
            attached_ids=attached_ids or None
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        clear_user_state(chat_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
        
        if success:
            bot.send_message(
                chat_id,
                "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ Bitrix24!",
                reply_markup=create_menu_keyboard()
            )
        else:
            bot.send_message(
                chat_id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=create_menu_keyboard()
            )

# --------------- –∑–∞–ø—É—Å–∫ ----------------
def run_bot() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling."""
    logger.info("Starting bot...")
    bot.delete_webhook()

    while True:
        try:
            bot.infinity_polling(
                long_polling_timeout=25,
                timeout=10,
                skip_pending=True
            )
        except Exception as e:
            logger.error(f"Polling crashed: {e}")
            time.sleep(5)

@app.route("/")
def index() -> str:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ Flask."""
    return "Telegram bot is running!"

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)