import os
import logging
import requests
from flask import Flask, request
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, CallbackQueryHandler
)

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
BITRIX_WEBHOOK_URL = os.getenv("BITRIX_WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8443))
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
application = Application.builder().token(TOKEN).build()

user_sessions = {}

CATEGORIES = {
    "–í–æ–ø—Ä–æ—Å 1": 270,
    "–í–æ–ø—Ä–æ—Å 2": 12,
    "–í–æ–ø—Ä–æ—Å 3": 270,
    "–î—Ä—É–≥–æ–µ": 12
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(text, callback_data=f"category|{text}")] for text in CATEGORIES]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –≤ Bitrix24. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data.startswith("category|"):
        category = query.data.split("|", 1)[1]
        user_sessions[user_id] = {
            "category": category,
            "text": None,
            "files": []
        }
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª", callback_data="delete_last")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")]
        ]
        await query.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —Ñ–∞–π–ª—ã. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "confirm":
        await send_to_bitrix(update, context)

    elif query.data == "cancel":
        user_sessions.pop(user_id, None)
        await query.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await start(update, context)

    elif query.data == "back":
        user_sessions.pop(user_id, None)
        await start(update, context)

    elif query.data == "delete_last":
        session = user_sessions.get(user_id)
        if session and session['files']:
            session['files'].pop()
            await query.message.reply_text("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω.")
        else:
            await query.message.reply_text("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = user_sessions.get(update.message.from_user.id)
    if session is not None:
        session["text"] = update.message.text
        await update.message.reply_text("–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'.")

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = user_sessions.get(update.message.from_user.id)
    if session is None:
        return

    file = None
    for kind in ('document', 'photo', 'video', 'audio', 'voice', 'sticker'):
        file = getattr(update.message, kind, None)
        if file:
            if kind == 'photo':
                file = file[-1]  # —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            break

    if not file:
        return

    telegram_file = await context.bot.get_file(file.file_id)
    file_info = {
        "file_id": file.file_id,
        "file_path": telegram_file.file_path,
        "file_unique_id": file.file_unique_id,
        "mime_type": getattr(file, 'mime_type', None),
        "file_name": getattr(file, 'file_name', None)
    }
    session["files"].append(file_info)
    await update.message.reply_text("–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'.")

async def send_to_bitrix(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.callback_query.from_user.id
    session = user_sessions.get(user_id)
    if not session:
        await update.callback_query.message.reply_text("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    files_bitrix_ids = []
    for file in session["files"]:
        file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file['file_path']}"
        bitrix_file_id = upload_file_to_bitrix(file_url, file.get("file_name") or file["file_unique_id"])
        if bitrix_file_id:
            files_bitrix_ids.append(bitrix_file_id)
        else:
            logger.warning("Failed to upload file: %s", file_url)

    task_data = {
        "fields": {
            "TITLE": f"–ó–∞–¥–∞—á–∞ –æ—Ç Telegram-–±–æ—Ç–∞ ({session['category']})",
            "DESCRIPTION": session["text"] or "(–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è)",
            "RESPONSIBLE_ID": CATEGORIES[session["category"]],
            "UF_TASK_WEBDAV_FILES": files_bitrix_ids
        }
    }

    try:
        response = requests.post(BITRIX_WEBHOOK_URL, json=task_data)
        response.raise_for_status()
        await update.callback_query.message.reply_text("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ Bitrix24!")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏", exc_info=e)
        await update.callback_query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ Bitrix24.")

    user_sessions.pop(user_id, None)

def upload_file_to_bitrix(file_url, filename):
    folder_id = "0"
    upload_url = BITRIX_WEBHOOK_URL.replace("task.item.add.json", "disk.folder.uploadfile.json")

    data = {
        "id": folder_id,
        "generateUniqueName": "Y"
    }

    try:
        with requests.get(file_url, stream=True) as tg_resp:
            tg_resp.raise_for_status()
            files = {"file": (filename, tg_resp.raw)}
            response = requests.post(upload_url, data=data, files=files)
            response.raise_for_status()
            result = response.json()
            return result.get("result", {}).get("ID")
    except Exception as e:
        logger.error("Failed to upload file: %s", file_url, exc_info=e)
        return None

@app.route("/")
def index():
    return "OK", 200

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(handle_callback))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_file))

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    webhook_path = f"/{WEBHOOK_SECRET}"
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}{webhook_path}"
    logger.info(f"Setting webhook to: {webhook_url}")

    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=webhook_url,
        webhook_path=webhook_path
    )
