import os
import telebot
import requests

# –¢–æ–∫–µ–Ω –∏ –≤–µ–±—Ö—É–∫
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
BITRIX_WEBHOOK = os.getenv("BITRIX_WEBHOOK_URL")

bot = telebot.TeleBot(TELEGRAM_TOKEN)

# user_state –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
user_state = {}

# ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ Bitrix24 –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É
responsible_ids = {
    "–í–æ–ø—Ä–æ—Å 1": 270,
    "–í–æ–ø—Ä–æ—Å 2": 12,
    "–í–æ–ø—Ä–æ—Å 3": 270,
    "–î—Ä—É–≥–æ–µ": 12
}


@bot.message_handler(commands=['start'])
def start(message):
    user_state[message.chat.id] = {}
    show_main_menu(message.chat.id)


def show_main_menu(chat_id):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ["–í–æ–ø—Ä–æ—Å 1", "–í–æ–ø—Ä–æ—Å 2", "–í–æ–ø—Ä–æ—Å 3", "–î—Ä—É–≥–æ–µ"]
    markup.add(*buttons)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=markup)
    user_state[chat_id] = {"step": "waiting_for_topic"}


@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "waiting_for_topic")
def handle_topic_selection(message):
    topic = message.text
    if topic not in responsible_ids:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.")
        return

    user_state[message.chat.id] = {
        "step": "collecting_input",
        "topic": topic,
        "text": [],
        "files": []
    }

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")

    bot.send_message(
        message.chat.id,
        f"–û—Ç–ª–∏—á–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏: {topic}.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ —Ñ–∞–π–ª—ã. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª.",
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "collecting_input", content_types=['text', 'photo', 'document', 'video'])
def collect_user_input(message):
    state = user_state.get(message.chat.id)
    if not state:
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    if message.text and message.text not in ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]:
        state["text"].append(message.text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã
    if message.content_type in ['photo', 'document', 'video']:
        file_id = None
        if message.content_type == 'photo':
            file_id = message.photo[-1].file_id  # —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –≤–µ—Ä—Å–∏—è —Ñ–æ—Ç–æ
        elif message.content_type == 'document':
            file_id = message.document.file_id
        elif message.content_type == 'video':
            file_id = message.video.file_id

        if file_id:
            file_info = bot.get_file(file_id)
            file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_info.file_path}"
            state["files"].append(file_url)
            bot.send_message(message.chat.id, f"–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {file_url}")


@bot.message_handler(func=lambda message: message.text in ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"])
def handle_confirmation(message):
    chat_id = message.chat.id
    state = user_state.get(chat_id)

    if not state:
        show_main_menu(chat_id)
        return

    if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        show_main_menu(chat_id)

    elif message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å":
        user_state[chat_id]["text"] = []
        user_state[chat_id]["files"] = []
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏ —Ñ–∞–π–ª—ã. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª.")

    elif message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        topic = state["topic"]
        text = "\n".join(state["text"])
        files = "\n".join(state["files"])
        description = f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ '{topic}'\n\n–û–ø–∏—Å–∞–Ω–∏–µ:\n{text}"
        if files:
            description += f"\n\n–§–∞–π–ª—ã:\n{files}"

        responsible_id = responsible_ids[topic]

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ Bitrix24
        task_data = {
            "fields": {
                "TITLE": f"–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {topic}",
                "DESCRIPTION": description,
                "RESPONSIBLE_ID": responsible_id
            }
        }

        response = requests.post(BITRIX_WEBHOOK, json=task_data)

        if response.status_code == 200:
            bot.send_message(chat_id, f"‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ '{topic}' —Å–æ–∑–¥–∞–Ω–∞!")
        else:
            bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ö–æ–¥: {response.status_code}")

        show_main_menu(chat_id)
