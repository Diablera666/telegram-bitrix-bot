import os
import logging
import requests
import time
import random
import shutil
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    CallbackQueryHandler, filters, ContextTypes
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
BITRIX_WEBHOOK_TASK = os.getenv("BITRIX_WEBHOOK_URL")
PORT = int(os.getenv("PORT", 10000))
BITRIX_UPLOAD_URL = BITRIX_WEBHOOK_TASK.replace('task.item.add.json', 'disk.folder.uploadfile.json')
BITRIX_FOLDER_ID = 5636  # ID –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
application = Application.builder().token(TOKEN).build()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
CATEGORY_MAP = {
    "–í–æ–ø—Ä–æ—Å 1": 270,
    "–í–æ–ø—Ä–æ—Å 2": 12,
    "–í–æ–ø—Ä–æ—Å 3": 270,
    "–î—Ä—É–≥–æ–µ": 12
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        chat_id = update.effective_chat.id
        keyboard = [[InlineKeyboardButton(k, callback_data=k)] for k in CATEGORY_MAP]
        
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –≤ Bitrix24.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        user_data[chat_id] = {
            "files": [],
            "text": "",
            "category": None
        }
        logger.info(f"–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chat_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫"""
    try:
        query = update.callback_query
        await query.answer()
        chat_id = query.message.chat.id

        if query.data in CATEGORY_MAP:
            user_data[chat_id] = {
                "files": [],
                "text": "",
                "category": query.data
            }
            await query.edit_message_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{query.data}</b>\n\n"
                "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã).\n"
                "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª.",
                parse_mode="HTML"
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {query.data}")

        elif query.data == "confirm":
            await confirm_task(update, context)
        elif query.data == "cancel":
            await cancel_task(update, context)
        elif query.data == "remove_last":
            await remove_last_file(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        chat_id = update.effective_chat.id
        if chat_id not in user_data or not user_data[chat_id]["category"]:
            await start(update, context)
            return

        user_data[chat_id]["text"] = update.message.text
        await show_preview(update, chat_id)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç {chat_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ text_handler: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def file_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    try:
        chat_id = update.effective_chat.id
        if chat_id not in user_data or not user_data[chat_id]["category"]:
            await start(update, context)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        file = None
        if update.message.document:
            file = update.message.document
        elif update.message.photo:
            file = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        elif update.message.video:
            file = update.message.video

        if not file:
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        os.makedirs("downloads", exist_ok=True)
        file_path = f"downloads/{chat_id}_{file.file_id}"
        await file.get_file().download_to_drive(file_path)
        
        user_data[chat_id]["files"].append(file_path)
        await update.message.reply_text(
            f"üìé –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(user_data[chat_id]['files'])}"
        )
        logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ file_handler: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def show_preview(update: Update, chat_id: int):
    """–ü–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é –∑–∞–¥–∞—á–∏"""
    try:
        data = user_data[chat_id]
        text = (
            f"<b>–ü—Ä–µ–≤—å—é –∑–∞–¥–∞—á–∏</b>\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
            f"–¢–µ–∫—Å—Ç: {data['text'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–§–∞–π–ª–æ–≤: {len(data['files'])}"
        )

        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]
        if data["files"]:
            keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª", callback_data="remove_last")])

        if update.message:
            await update.message.reply_text(text, 
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
        else:
            await update.callback_query.edit_message_text(text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_preview: {e}")

async def confirm_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Bitrix24"""
    try:
        query = update.callback_query
        chat_id = query.message.chat.id
        data = user_data.get(chat_id)

        if not data or not data["category"]:
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
            return

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ Bitrix24
        file_ids = []
        for file_path in data["files"]:
            try:
                file_id = upload_to_bitrix(file_path)
                if file_id:
                    file_ids.append(file_id)
                os.remove(file_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task_data = {
            "fields": {
                "TITLE": f"Telegram: {data['category']}",
                "DESCRIPTION": data["text"] or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è",
                "RESPONSIBLE_ID": CATEGORY_MAP[data["category"]],
                "UF_TASK_WEBDAV_FILES": file_ids
            }
        }

        response = requests.post(BITRIX_WEBHOOK_TASK, json=task_data, timeout=15)
        if response.status_code == 200:
            await query.edit_message_text("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ Bitrix24!")
            logger.info(f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {chat_id}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Bitrix: {response.status_code} - {response.text}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏")

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        user_data.pop(chat_id, None)

        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ downloads
        if random.random() < 0.1:  # 10% chance
            clean_downloads()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_task: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def upload_to_bitrix(file_path: str) -> Optional[int]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫ Bitrix24"""
    try:
        with open(file_path, 'rb') as f:
            response = requests.post(
                BITRIX_UPLOAD_URL,
                files={'file': (os.path.basename(file_path), f)},
                data={'id': BITRIX_FOLDER_ID},
                timeout=30
            )
            result = response.json()
            logger.info(f"–û—Ç–≤–µ—Ç Bitrix: {result}")
            return result.get('result', {}).get('ID')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Bitrix: {e}")
        return None

async def cancel_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        query = update.callback_query
        chat_id = query.message.chat.id

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if chat_id in user_data:
            for file_path in user_data[chat_id]["files"]:
                try:
                    if os.path.exists(file_path):
                        os.remove(file_path)
                except Exception:
                    pass
            user_data.pop(chat_id)

        await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_task: {e}")

async def remove_last_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        query = update.callback_query
        chat_id = query.message.chat.id

        if chat_id in user_data and user_data[chat_id]["files"]:
            last_file = user_data[chat_id]["files"].pop()
            try:
                if os.path.exists(last_file):
                    os.remove(last_file)
            except Exception:
                pass
            await show_preview(update, chat_id)
            logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª {last_file}")
        else:
            await query.answer("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ remove_last_file: {e}")

def clean_downloads():
    """–û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ downloads"""
    try:
        for filename in os.listdir("downloads"):
            file_path = os.path.join("downloads", filename)
            try:
                if os.path.isfile(file_path):
                    os.unlink(file_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path}: {e}")
        logger.info("–ü–∞–ø–∫–∞ downloads –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ downloads: {e}")

# –í–µ–±—Ö—É–∫ –¥–ª—è Flask
@app.route(f"/webhook/{TOKEN}", methods=["POST"])
def webhook():
    if request.method == "POST":
        try:
            json_data = request.get_json()
            update = Update.de_json(json_data, application.bot)
            application.create_task(application.update_queue.put(update))
            return "ok"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
            return "error", 500
    return "Method not allowed", 405

@app.route("/")
def index():
    return "Telegram Bot is running and waiting for updates!"

def setup_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    application.add_handler(MessageHandler(filters.Document.ALL | filters.PHOTO | filters.VIDEO, file_handler))

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not TOKEN or not BITRIX_WEBHOOK_TASK:
            raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞...")
        setup_handlers()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
        os.makedirs("downloads", exist_ok=True)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞...")
        application.bot.delete_webhook()
        time.sleep(1)
        application.bot.set_webhook(
            url=f"https://telegram-bitrix-bot.onrender.com/webhook/{TOKEN}",
            allowed_updates=Update.ALL_TYPES
        )
        
        logger.info(f"–ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
        app.run(host="0.0.0.0", port=PORT)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()
